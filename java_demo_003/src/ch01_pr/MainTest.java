package ch01_pr;
/**
 * 가장 유명한 디자인 패턴 중 하나인 팩토리 매서드 패턴
 * # 생성 패턴 중 하나.
 * - 생성패턴은 인스턴스를 만드는 절차를 추상화하는 패턴
 * - 생성패턴에 속하는 패턴들은 객체를 생성, 합성하는 방법이나 객체의 표현 방법을 시스템과 분리해 준다.
 * - 생성패턴은 시스템이 상속보다 복합 방법을 사용하는 방향으로 진화되어 가면서 중요성이 더해지고 있다.
 * 
 * # 생성패턴에서는 중요한 이슈 2가지가 있다.
 * - 생성패턴은 시스템이 어떤 Concrete Class를 사용하는지에 대한 정보를 캡슐화 한다.
 * - 생성패턴은 이들 클래스의 인스턴스들이 어떻게 만들어지고 어떻게 결합되는지에 대한 부분을 완전히 가려준다.
 * 
 * # 즉 팩토리 매서드 패턴이란?
 * - 팩토리 패턴은 객체를 생성하는 인터페이스는 미리 정의하되, 인스턴스를 만들 클래스의 결정은 서브 클래스 쪽에서 내리는 패턴이다.
 * => 다시말해, 여러개의 서브클래스를 가진 슈퍼클래스가 있을 때, 인풋에 따라 하나의 자식 클래스를 인스턴스해서 리턴해주는 방식이다.
 * 
 * # 팩토리패턴에서는 클래스의 인스턴스를 만드는 시점을 서브클래스로 미룬다.
 * 
 * #활용성(어떨 때 팩토리 패턴을 사용하나?
 * - 어떤 클래스가 자신이 생성해야하는 객체의 클래스를 예측할 수 없을 때.
 * - 생성할 객체를 기술하는 책임을 자신이 아니고 서브클래스가 가졌으면 할 때 사용
 * 
 * #팩토리매서드패턴의 장점
 * - 팩토리 매서드 패턴은 클라이언트 코드로부터 서브 클래스의 인스턴스화를 제거하여 서로간의 종속성을 낮추고 결합도를 느슨하게 하여 확장을 쉽게한다.
 * - pc클래스에 대해서 수정혹은 삭제가 일어나더라도 클라이언트는 알 수 없기 때문에 코드를 변경할 필요가 없다.
 * - 팩토리 패턴은 클라이언트와 구현 객체들 사이에 추상화를 제공한다.
 * @author ITPS
 *
 */
public class MainTest {
	public static void main(String[] args) {
		// 객체를 생성시킨다. 어떤 객체를 생성시키는지 감춰져 있지만 type에 따라 다르게 생성된다.
		// 이 시점에 객체가 생성되고, 구현은 서브클래스에게 있다. => 종속성 down, 결합도 down, 확장성 up
		// 유지보수편리 up, 클라이언트와 구현 객체들 사이에 추상화 제공
		
		Computer computer1 = new ComputerFactory().getComputer("PC", "32","1TB", "ARM");
		Computer computer2 = new ComputerFactory().getComputer("NoteBook", "16", "500", "Intel");
				
		System.out.println(computer1);
		System.out.println(computer2);
	}
}
